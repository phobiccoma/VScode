"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mapErrAsyncForResult = void 0;
var assert_1 = require("../internal/assert");
var ErrorMessage_1 = require("../internal/ErrorMessage");
var Result_1 = require("./Result");
/**
 *  Maps a `Result<T, E>` to `Result<T, F>` by applying a _transformer_ function `mapFn<E, F>`
 *  to an contained `Err(E)` value, leaving an `Ok(T)` value untouched.
 *
 *  This function can be used to pass through a successful result while handling an error.
 */
function mapErrAsyncForResult(input, transformer) {
    if (Result_1.isOk(input)) {
        var s = input;
        return Promise.resolve(s);
    }
    var result = transformer(input.err);
    // If this is async function, this always return Promise, but not.
    // We should check to clarify the error case if user call this function from plain js
    // and they mistake to use this.
    assert_1.assertIsPromise(result, ErrorMessage_1.ERR_MSG_TRANSFORMER_MUST_RETURN_PROMISE);
    var passed = result.then(Result_1.createErr);
    return passed;
}
exports.mapErrAsyncForResult = mapErrAsyncForResult;
