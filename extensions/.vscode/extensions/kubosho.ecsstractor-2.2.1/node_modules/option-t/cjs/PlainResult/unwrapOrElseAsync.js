"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.unwrapOrElseAsyncFromResult = void 0;
var assert_1 = require("../internal/assert");
var ErrorMessage_1 = require("../internal/ErrorMessage");
var Result_1 = require("./Result");
var unwrap_1 = require("./unwrap");
/**
 *  Unwraps _input_, returns the content of an `Ok(T)`.
 *  If the value is an `Err(E)` then it calls `recoverer` with its value.
 */
function unwrapOrElseAsyncFromResult(input, recoverer) {
    if (Result_1.isOk(input)) {
        var value = unwrap_1.unwrapFromResult(input);
        return Promise.resolve(value);
    }
    var error = unwrap_1.unwrapErrFromResult(input);
    var defaultValue = recoverer(error);
    // If this is async function, this always return Promise, but not.
    // We should check to clarify the error case if user call this function from plain js
    // and they mistake to use this.
    assert_1.assertIsPromise(defaultValue, ErrorMessage_1.ERR_MSG_RECOVERER_MUST_RETURN_PROMISE);
    return defaultValue;
}
exports.unwrapOrElseAsyncFromResult = unwrapOrElseAsyncFromResult;
