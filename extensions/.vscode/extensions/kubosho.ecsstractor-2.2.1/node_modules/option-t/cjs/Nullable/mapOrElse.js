"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mapOrElseForNullable = void 0;
var expect_1 = require("./expect");
var ErrorMessage_1 = require("./ErrorMessage");
/**
 *  Return the result of _transformer_ with using _input_ as an argument for it if _input_ is not `null`.
 *  Otherwise, return the result of _recoverer_.
 *
 *  Basically, this operation is a combination `map()` and `unwrapOrElse()`.
 *
 *  * `U` must not be `Nullable<*>`.
 *      * If the result of _transformer_ is `null`, this throw an `Error`.
 *      * If the result of _recoverer_ is null`, this throw an `Error`.
 *  * If you'd like to accept `Nullable<*>` as `U`, use a combination `andThen()` and `orElse()`.
 */
function mapOrElseForNullable(input, recoverer, transformer) {
    var result;
    var msg = '';
    if (input !== null) {
        result = transformer(input);
        msg = ErrorMessage_1.ERR_MSG_TRANSFORMER_MUST_NOT_RETURN_NO_VAL_FOR_NULLABLE;
    }
    else {
        result = recoverer();
        msg = ErrorMessage_1.ERR_MSG_RECOVERER_MUST_NOT_RETURN_NO_VAL_FOR_NULLABLE;
    }
    var passed = expect_1.expectNotNull(result, msg);
    return passed;
}
exports.mapOrElseForNullable = mapOrElseForNullable;
