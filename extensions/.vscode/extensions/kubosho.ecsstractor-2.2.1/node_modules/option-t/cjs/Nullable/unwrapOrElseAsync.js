"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.unwrapOrElseAsyncFromNullable = void 0;
var assert_1 = require("../internal/assert");
var ErrorMessage_1 = require("../internal/ErrorMessage");
var expect_1 = require("./expect");
var ErrorMessage_2 = require("./ErrorMessage");
function check(value) {
    var passed = expect_1.expectNotNull(value, ErrorMessage_2.ERR_MSG_RECOVERER_MUST_NOT_RETURN_NO_VAL_FOR_NULLABLE);
    return passed;
}
/**
 *  Return _input_ as `T` if the passed _input_ is not `null`.
 *  Otherwise, return the result of _recoverer_.
 *
 *  * The result of _recoverer_ must not be `Nullable<*>`.
 *      * If you try to recover the value, use `orElse()`
 *  * If the result of _recoverer_ is `null`, throw `TypeError`.
 */
function unwrapOrElseAsyncFromNullable(input, recoverer) {
    if (input !== null) {
        return Promise.resolve(input);
    }
    var fallback = recoverer();
    // If this is async function, this always return Promise, but not.
    // We should check to clarify the error case if user call this function from plain js
    // and they mistake to use this.
    assert_1.assertIsPromise(fallback, ErrorMessage_1.ERR_MSG_RECOVERER_MUST_RETURN_PROMISE);
    var passed = fallback.then(check);
    return passed;
}
exports.unwrapOrElseAsyncFromNullable = unwrapOrElseAsyncFromNullable;
