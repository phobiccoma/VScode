"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mapOrElseAsyncForOption = void 0;
var assert_1 = require("../internal/assert");
var ErrorMessage_1 = require("../internal/ErrorMessage");
var Option_1 = require("./Option");
var unwrap_1 = require("./unwrap");
/**
 *  Maps a `Option<T>` to `U` by applying _transformer_ to a contained `Some(T)` value in _input_,
 *  or a _recoverer_ function to a contained `None` value in _input_.
 *  This function can be used to unpack a successful result while handling an error.
 */
function mapOrElseAsyncForOption(input, recoverer, transformer) {
    if (Option_1.isNone(input)) {
        var fallback = recoverer();
        // If this is async function, this always return Promise, but not.
        // We should check to clarify the error case if user call this function from plain js
        // and they mistake to use this.
        assert_1.assertIsPromise(fallback, ErrorMessage_1.ERR_MSG_RECOVERER_MUST_RETURN_PROMISE);
        return fallback;
    }
    var inner = unwrap_1.unwrapOption(input);
    var result = transformer(inner);
    // If this is async function, this always return Promise, but not.
    // We should check to clarify the error case if user call this function from plain js
    // and they mistake to use this.
    assert_1.assertIsPromise(result, ErrorMessage_1.ERR_MSG_TRANSFORMER_MUST_RETURN_PROMISE);
    return result;
}
exports.mapOrElseAsyncForOption = mapOrElseAsyncForOption;
