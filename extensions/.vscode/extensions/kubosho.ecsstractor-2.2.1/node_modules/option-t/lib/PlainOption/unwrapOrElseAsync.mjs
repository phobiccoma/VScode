import { assertIsPromise } from "../internal/assert.mjs";
import { ERR_MSG_RECOVERER_MUST_RETURN_PROMISE } from "../internal/ErrorMessage.mjs";
import { isSome } from "./Option.mjs";
import { unwrapOption } from "./unwrap.mjs";
/**
 *  Unwraps a result _input_, returns the content of an `Some(T)`.
 *  If the value is an `None` then it calls `def` with its value.
 */

export function unwrapOrElseAsyncFromOption(input, recoverer) {
  if (isSome(input)) {
    var val = unwrapOption(input);
    return Promise.resolve(val);
  }

  var defaultValue = recoverer(); // If this is async function, this always return Promise, but not.
  // We should check to clarify the error case if user call this function from plain js
  // and they mistake to use this.

  assertIsPromise(defaultValue, ERR_MSG_RECOVERER_MUST_RETURN_PROMISE);
  return defaultValue;
}