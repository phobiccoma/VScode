import { assertIsPromise } from "../internal/assert.mjs";
import { ERR_MSG_TRANSFORMER_MUST_RETURN_PROMISE } from "../internal/ErrorMessage.mjs";
import { isNone } from "./Option.mjs";
import { unwrapOption } from "./unwrap.mjs";
/**
 *  Return the result of _transformer_ with using _input_ as an argument for it if _input_ is `Some(T)`.
 *  Otherwise, return _defaultValue_.
 *
 *  Basically, this operation is a combination `map()` and `unwrapOr()`.
 */

export function mapOrAsyncForOption(input, defaultValue, transformer) {
  if (isNone(input)) {
    return Promise.resolve(defaultValue);
  }

  var inner = unwrapOption(input);
  var result = transformer(inner); // If this is async function, this always return Promise, but not.
  // We should check to clarify the error case if user call this function from plain js
  // and they mistake to use this.

  assertIsPromise(result, ERR_MSG_TRANSFORMER_MUST_RETURN_PROMISE);
  return result;
}