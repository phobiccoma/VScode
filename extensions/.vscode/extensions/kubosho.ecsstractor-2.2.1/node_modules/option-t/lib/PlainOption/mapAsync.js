"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mapAsyncForOption = void 0;
var assert_1 = require("../internal/assert");
var ErrorMessage_1 = require("../internal/ErrorMessage");
var Option_1 = require("./Option");
var unwrap_1 = require("./unwrap");
/**
 *  Maps a `Option<T>` to `Option<U>` by applying a _transformer_ function
 *  to an contained `Some(T)` value, leaving an `None` value untouched.
 *
 *  This function can be used to compose the results of two functions.
 */
function mapAsyncForOption(input, transformer) {
    if (Option_1.isNone(input)) {
        return Promise.resolve(input);
    }
    var inner = unwrap_1.unwrapOption(input);
    var result = transformer(inner);
    // If this is async function, this always return Promise, but not.
    // We should check to clarify the error case if user call this function from plain js
    // and they mistake to use this.
    assert_1.assertIsPromise(result, ErrorMessage_1.ERR_MSG_TRANSFORMER_MUST_RETURN_PROMISE);
    var wrapped = result.then(Option_1.createSome);
    return wrapped;
}
exports.mapAsyncForOption = mapAsyncForOption;
