"use strict";
/**
 *  This module provies that the Option type interface whose APIs are inspired
 *  by Rust's [`std::option::Option<T>`](https://doc.rust-lang.org/std/option/index.html).
 *
 *  We don't use a class to provides this module by these reason:
 *
 *  - Make treeshaking friendly.
 *      - Almost minifier cannot remove functions by default on `.prototype` even if they are unused.
 *  - Relax the incompatible problem by mixing multiple versions of this package
 *    in module dependency tree.
 *      - e.g. `instanceof` will be a problem. See ([#337](https://github.com/karen-irc/option-t/pull/337)).
 *
 *  And some operators might not return a new object and reuse the input
 *  to reduce an object allocation. Thus comparing _this `Option<T>`` is meaningless like a following code.
 *  This is by design because we think this pattern is meaningless.
 *
 *  ```typescript
 *      const a: Option<number> = createSome(1);
 *      const b: Option<number> = someOperator(a);
 *
 *      // Results of these comparison are undefined.
 *      a === b;
 *      Object.is(a, b);
 *  ```
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.unwrapOrElseAsync = exports.unwrapOrElse = exports.unwrapOr = exports.unwrap = exports.tap = exports.transpose = exports.orElseAsync = exports.orElse = exports.or = exports.mapOrElseAsync = exports.mapOrElse = exports.mapOrAsync = exports.mapOr = exports.mapAsync = exports.map = exports.flatten = exports.filter = exports.expect = exports.equal = exports.andThenAsync = exports.andThen = exports.and = exports.isNone = exports.isSome = exports.createNone = exports.createSome = void 0;
var Option_1 = require("./Option");
Object.defineProperty(exports, "createSome", { enumerable: true, get: function () { return Option_1.createSome; } });
Object.defineProperty(exports, "createNone", { enumerable: true, get: function () { return Option_1.createNone; } });
Object.defineProperty(exports, "isSome", { enumerable: true, get: function () { return Option_1.isSome; } });
Object.defineProperty(exports, "isNone", { enumerable: true, get: function () { return Option_1.isNone; } });
var and_1 = require("./and");
Object.defineProperty(exports, "and", { enumerable: true, get: function () { return and_1.andForOption; } });
var andThen_1 = require("./andThen");
Object.defineProperty(exports, "andThen", { enumerable: true, get: function () { return andThen_1.andThenForOption; } });
var andThenAsync_1 = require("./andThenAsync");
Object.defineProperty(exports, "andThenAsync", { enumerable: true, get: function () { return andThenAsync_1.andThenAsyncForOption; } });
var equal_1 = require("./equal");
Object.defineProperty(exports, "equal", { enumerable: true, get: function () { return equal_1.equalForOption; } });
var expect_1 = require("./expect");
Object.defineProperty(exports, "expect", { enumerable: true, get: function () { return expect_1.expectIsSome; } });
var filter_1 = require("./filter");
Object.defineProperty(exports, "filter", { enumerable: true, get: function () { return filter_1.filterForOption; } });
var flatten_1 = require("./flatten");
Object.defineProperty(exports, "flatten", { enumerable: true, get: function () { return flatten_1.flattenForOption; } });
var map_1 = require("./map");
Object.defineProperty(exports, "map", { enumerable: true, get: function () { return map_1.mapForOption; } });
var mapAsync_1 = require("./mapAsync");
Object.defineProperty(exports, "mapAsync", { enumerable: true, get: function () { return mapAsync_1.mapAsyncForOption; } });
var mapOr_1 = require("./mapOr");
Object.defineProperty(exports, "mapOr", { enumerable: true, get: function () { return mapOr_1.mapOrForOption; } });
var mapOrAsync_1 = require("./mapOrAsync");
Object.defineProperty(exports, "mapOrAsync", { enumerable: true, get: function () { return mapOrAsync_1.mapOrAsyncForOption; } });
var mapOrElse_1 = require("./mapOrElse");
Object.defineProperty(exports, "mapOrElse", { enumerable: true, get: function () { return mapOrElse_1.mapOrElseForOption; } });
var mapOrElseAsync_1 = require("./mapOrElseAsync");
Object.defineProperty(exports, "mapOrElseAsync", { enumerable: true, get: function () { return mapOrElseAsync_1.mapOrElseAsyncForOption; } });
var or_1 = require("./or");
Object.defineProperty(exports, "or", { enumerable: true, get: function () { return or_1.orForOption; } });
var orElse_1 = require("./orElse");
Object.defineProperty(exports, "orElse", { enumerable: true, get: function () { return orElse_1.orElseForOption; } });
var orElseAsync_1 = require("./orElseAsync");
Object.defineProperty(exports, "orElseAsync", { enumerable: true, get: function () { return orElseAsync_1.orElseAsyncForOption; } });
var transpose_1 = require("./transpose");
Object.defineProperty(exports, "transpose", { enumerable: true, get: function () { return transpose_1.transposeForOption; } });
var tap_1 = require("./tap");
Object.defineProperty(exports, "tap", { enumerable: true, get: function () { return tap_1.tapOption; } });
var unwrap_1 = require("./unwrap");
Object.defineProperty(exports, "unwrap", { enumerable: true, get: function () { return unwrap_1.unwrapOption; } });
var unwrapOr_1 = require("./unwrapOr");
Object.defineProperty(exports, "unwrapOr", { enumerable: true, get: function () { return unwrapOr_1.unwrapOrFromOption; } });
var unwrapOrElse_1 = require("./unwrapOrElse");
Object.defineProperty(exports, "unwrapOrElse", { enumerable: true, get: function () { return unwrapOrElse_1.unwrapOrElseFromOption; } });
var unwrapOrElseAsync_1 = require("./unwrapOrElseAsync");
Object.defineProperty(exports, "unwrapOrElseAsync", { enumerable: true, get: function () { return unwrapOrElseAsync_1.unwrapOrElseAsyncFromOption; } });
