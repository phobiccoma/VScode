import { assertIsPromise } from "../internal/assert.mjs";
import { ERR_MSG_RECOVERER_MUST_RETURN_PROMISE, ERR_MSG_TRANSFORMER_MUST_RETURN_PROMISE } from "../internal/ErrorMessage.mjs";
import { isNone } from "./Option.mjs";
import { unwrapOption } from "./unwrap.mjs";
/**
 *  Maps a `Option<T>` to `U` by applying _transformer_ to a contained `Some(T)` value in _input_,
 *  or a _recoverer_ function to a contained `None` value in _input_.
 *  This function can be used to unpack a successful result while handling an error.
 */

export function mapOrElseAsyncForOption(input, recoverer, transformer) {
  if (isNone(input)) {
    var fallback = recoverer(); // If this is async function, this always return Promise, but not.
    // We should check to clarify the error case if user call this function from plain js
    // and they mistake to use this.

    assertIsPromise(fallback, ERR_MSG_RECOVERER_MUST_RETURN_PROMISE);
    return fallback;
  }

  var inner = unwrapOption(input);
  var result = transformer(inner); // If this is async function, this always return Promise, but not.
  // We should check to clarify the error case if user call this function from plain js
  // and they mistake to use this.

  assertIsPromise(result, ERR_MSG_TRANSFORMER_MUST_RETURN_PROMISE);
  return result;
}