/**
 *  This module provies that the Option type interface whose APIs are inspired
 *  by Rust's [`std::option::Option<T>`](https://doc.rust-lang.org/std/option/index.html).
 *
 *  We don't use a class to provides this module by these reason:
 *
 *  - Make treeshaking friendly.
 *      - Almost minifier cannot remove functions by default on `.prototype` even if they are unused.
 *  - Relax the incompatible problem by mixing multiple versions of this package
 *    in module dependency tree.
 *      - e.g. `instanceof` will be a problem. See ([#337](https://github.com/karen-irc/option-t/pull/337)).
 *
 *  And some operators might not return a new object and reuse the input
 *  to reduce an object allocation. Thus comparing _this `Option<T>`` is meaningless like a following code.
 *  This is by design because we think this pattern is meaningless.
 *
 *  ```typescript
 *      const a: Option<number> = createSome(1);
 *      const b: Option<number> = someOperator(a);
 *
 *      // Results of these comparison are undefined.
 *      a === b;
 *      Object.is(a, b);
 *  ```
 */
export { createSome, createNone, isSome, isNone } from "./Option.mjs";
export { andForOption as and } from "./and.mjs";
export { andThenForOption as andThen } from "./andThen.mjs";
export { andThenAsyncForOption as andThenAsync } from "./andThenAsync.mjs";
export { equalForOption as equal } from "./equal.mjs";
export { expectIsSome as expect } from "./expect.mjs";
export { filterForOption as filter } from "./filter.mjs";
export { flattenForOption as flatten } from "./flatten.mjs";
export { mapForOption as map } from "./map.mjs";
export { mapAsyncForOption as mapAsync } from "./mapAsync.mjs";
export { mapOrForOption as mapOr } from "./mapOr.mjs";
export { mapOrAsyncForOption as mapOrAsync } from "./mapOrAsync.mjs";
export { mapOrElseForOption as mapOrElse } from "./mapOrElse.mjs";
export { mapOrElseAsyncForOption as mapOrElseAsync } from "./mapOrElseAsync.mjs";
export { orForOption as or } from "./or.mjs";
export { orElseForOption as orElse } from "./orElse.mjs";
export { orElseAsyncForOption as orElseAsync } from "./orElseAsync.mjs";
export { transposeForOption as transpose } from "./transpose.mjs";
export { tapOption as tap } from "./tap.mjs";
export { unwrapOption as unwrap } from "./unwrap.mjs";
export { unwrapOrFromOption as unwrapOr } from "./unwrapOr.mjs";
export { unwrapOrElseFromOption as unwrapOrElse } from "./unwrapOrElse.mjs";
export { unwrapOrElseAsyncFromOption as unwrapOrElseAsync } from "./unwrapOrElseAsync.mjs";