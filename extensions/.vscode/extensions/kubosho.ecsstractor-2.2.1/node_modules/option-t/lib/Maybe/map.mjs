import { expectNotNullAndUndefined } from "./expect.mjs";
import { ERR_MSG_TRANSFORMER_MUST_NOT_RETURN_NO_VAL_FOR_MAYBE } from "./ErrorMessage.mjs";
import { isNullOrUndefined } from "./Maybe.mjs";
/**
 *  Return the result of _transformer_ with using _input_ as an argument for it if _input_ is not `null` and `undefined`.
 *  Otherwise, return `null` or `undefined` inputted as _input_.
 *
 *  * `U` must not be `Maybe<*>`.
 *      * If you'd like return `Maybe<*>` as `U`, use `andThen()`.
 *      * If the result of _transformer_ is `null` or `undefined`, this throw an `Error`.
 */

export function mapForMaybe(input, transformer) {
  if (isNullOrUndefined(input)) {
    return input;
  }

  var result = transformer(input); // XXX:
  // If `U` is `Maybe<SomeType>`, we think naturally the returned value of this function would be
  // the nested type `Maybe<Maybe<SomeType>>`. But this type means `(SomeType | null | undefined) | null | undefined`.
  // So a type checker would recognize this type as `SomeType | null | undefined`. So it's flattened.
  // Then the user should call `andThen` (_flatmap_) operation instead of this.

  var passed = expectNotNullAndUndefined(result, ERR_MSG_TRANSFORMER_MUST_NOT_RETURN_NO_VAL_FOR_MAYBE);
  return passed;
}