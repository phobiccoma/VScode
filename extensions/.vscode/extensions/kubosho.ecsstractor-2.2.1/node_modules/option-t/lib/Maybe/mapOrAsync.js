"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mapOrAsyncForMaybe = void 0;
var assert_1 = require("../internal/assert");
var ErrorMessage_1 = require("../internal/ErrorMessage");
var ErrorMessage_2 = require("./ErrorMessage");
var expect_1 = require("./expect");
var Maybe_1 = require("./Maybe");
function check(value) {
    var passed = expect_1.expectNotNullAndUndefined(value, ErrorMessage_2.ERR_MSG_TRANSFORMER_MUST_NOT_RETURN_NO_VAL_FOR_MAYBE);
    return passed;
}
/**
 *  Return the result of _transformer_ with using _input_ as an argument for it if _input_ is not `null` and `undefined`.
 *  Otherwise, return _defaultValue_.
 *
 *  Basically, this operation is a combination `map()` and `unwrapOr()`.
 *
 *  * `U` must not be `Maybe<*>`.
 *      * If the result of _transformer_ is `null` or `undefined`, this throw an `Error`.
 *      * If the result of _defaultValue_ is `null` or `undefined`, this throw an `Error`.
 *  * If you'd like to accept `Maybe<*>` as `U`, use a combination `andThen()` and `or()`.
 */
function mapOrAsyncForMaybe(input, defaultValue, transformer) {
    if (Maybe_1.isNullOrUndefined(input)) {
        var nonNullDefault = expect_1.expectNotNullAndUndefined(defaultValue, ErrorMessage_2.ERR_MSG_DEFAULT_VALUE_MUST_NOT_BE_NO_VAL_FOR_MAYBE);
        return Promise.resolve(nonNullDefault);
    }
    var result = transformer(input);
    // If this is async function, this always return Promise, but not.
    // We should check to clarify the error case if user call this function from plain js
    // and they mistake to use this.
    assert_1.assertIsPromise(result, ErrorMessage_1.ERR_MSG_TRANSFORMER_MUST_RETURN_PROMISE);
    var passed = result.then(check);
    return passed;
}
exports.mapOrAsyncForMaybe = mapOrAsyncForMaybe;
