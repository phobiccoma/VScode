import { assertIsPromise } from "../internal/assert.mjs";
import { ERR_MSG_RECOVERER_MUST_RETURN_PROMISE } from "../internal/ErrorMessage.mjs";
import { isOk } from "./Result.mjs";
import { unwrapFromResult, unwrapErrFromResult } from "./unwrap.mjs";
/**
 *  Unwraps _input_, returns the content of an `Ok(T)`.
 *  If the value is an `Err(E)` then it calls `recoverer` with its value.
 */

export function unwrapOrElseAsyncFromResult(input, recoverer) {
  if (isOk(input)) {
    var value = unwrapFromResult(input);
    return Promise.resolve(value);
  }

  var error = unwrapErrFromResult(input);
  var defaultValue = recoverer(error); // If this is async function, this always return Promise, but not.
  // We should check to clarify the error case if user call this function from plain js
  // and they mistake to use this.

  assertIsPromise(defaultValue, ERR_MSG_RECOVERER_MUST_RETURN_PROMISE);
  return defaultValue;
}