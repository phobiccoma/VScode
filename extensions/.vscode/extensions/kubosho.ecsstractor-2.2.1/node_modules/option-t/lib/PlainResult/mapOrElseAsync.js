"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mapOrElseAsyncForResult = void 0;
var assert_1 = require("../internal/assert");
var ErrorMessage_1 = require("../internal/ErrorMessage");
var Result_1 = require("./Result");
var unwrap_1 = require("./unwrap");
/**
 *  Maps a `Result<T, E>` to `U` by applying _transformer_ to a contained `Ok(T)` value in _input_,
 *  or a _recoverer_ function to a contained `Err(E)` value in _input_.
 *  This function can be used to unpack a successful result while handling an error.
 */
function mapOrElseAsyncForResult(input, recoverer, transformer) {
    if (Result_1.isOk(input)) {
        var inner = unwrap_1.unwrapFromResult(input);
        var result = transformer(inner);
        // If this is async function, this always return Promise, but not.
        // We should check to clarify the error case if user call this function from plain js
        // and they mistake to use this.
        assert_1.assertIsPromise(result, ErrorMessage_1.ERR_MSG_TRANSFORMER_MUST_RETURN_PROMISE);
        return result;
    }
    var err = unwrap_1.unwrapErrFromResult(input);
    var fallback = recoverer(err);
    // If this is async function, this always return Promise, but not.
    // We should check to clarify the error case if user call this function from plain js
    // and they mistake to use this.
    assert_1.assertIsPromise(fallback, ErrorMessage_1.ERR_MSG_RECOVERER_MUST_RETURN_PROMISE);
    return fallback;
}
exports.mapOrElseAsyncForResult = mapOrElseAsyncForResult;
