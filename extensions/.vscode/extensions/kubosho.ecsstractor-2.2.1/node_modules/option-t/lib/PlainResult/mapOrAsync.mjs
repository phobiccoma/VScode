import { assertIsPromise } from "../internal/assert.mjs";
import { ERR_MSG_TRANSFORMER_MUST_RETURN_PROMISE } from "../internal/ErrorMessage.mjs";
import { isErr } from "./Result.mjs";
import { unwrapFromResult } from "./unwrap.mjs";
/**
 *  Return the result of _transformer_ with using _input_ as an argument for it if _input_ is `Ok(T)`.
 *  Otherwise, return _defaultValue_.
 *
 *  Basically, this operation is a combination `mapAsync()` and `unwrapOr()`.
 */

export function mapOrAsyncForResult(input, defaultValue, transformer) {
  if (isErr(input)) {
    var result_1 = Promise.resolve(defaultValue);
    return result_1;
  }

  var source = unwrapFromResult(input);
  var result = transformer(source); // If this is async function, this always return Promise, but not.
  // We should check to clarify the error case if user call this function from plain js
  // and they mistake to use this.

  assertIsPromise(result, ERR_MSG_TRANSFORMER_MUST_RETURN_PROMISE);
  return result;
}