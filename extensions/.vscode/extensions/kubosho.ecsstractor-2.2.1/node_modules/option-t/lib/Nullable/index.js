"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.unwrapOrElseAsync = exports.unwrapOrElse = exports.unwrapOr = exports.unwrap = exports.tap = exports.orElseAsync = exports.orElse = exports.mapOrElseAsync = exports.mapOrElse = exports.mapOrAsync = exports.mapOr = exports.mapAsync = exports.map = exports.expect = exports.andThenAsync = exports.andThen = exports.isNull = exports.isNotNull = void 0;
var Nullable_1 = require("./Nullable");
Object.defineProperty(exports, "isNotNull", { enumerable: true, get: function () { return Nullable_1.isNotNull; } });
Object.defineProperty(exports, "isNull", { enumerable: true, get: function () { return Nullable_1.isNull; } });
// XXX: `and()` operation is equivalent of `a && b` so we don't ship it by default set.
//export { andForNullable as and } from './and';
var andThen_1 = require("./andThen");
Object.defineProperty(exports, "andThen", { enumerable: true, get: function () { return andThen_1.andThenForNullable; } });
var andThenAsync_1 = require("./andThenAsync");
Object.defineProperty(exports, "andThenAsync", { enumerable: true, get: function () { return andThenAsync_1.andThenAsyncForNullable; } });
var expect_1 = require("./expect");
Object.defineProperty(exports, "expect", { enumerable: true, get: function () { return expect_1.expectNotNull; } });
var map_1 = require("./map");
Object.defineProperty(exports, "map", { enumerable: true, get: function () { return map_1.mapForNullable; } });
var mapAsync_1 = require("./mapAsync");
Object.defineProperty(exports, "mapAsync", { enumerable: true, get: function () { return mapAsync_1.mapAsyncForNullable; } });
var mapOr_1 = require("./mapOr");
Object.defineProperty(exports, "mapOr", { enumerable: true, get: function () { return mapOr_1.mapOrForNullable; } });
var mapOrAsync_1 = require("./mapOrAsync");
Object.defineProperty(exports, "mapOrAsync", { enumerable: true, get: function () { return mapOrAsync_1.mapOrAsyncForNullable; } });
var mapOrElse_1 = require("./mapOrElse");
Object.defineProperty(exports, "mapOrElse", { enumerable: true, get: function () { return mapOrElse_1.mapOrElseForNullable; } });
var mapOrElseAsync_1 = require("./mapOrElseAsync");
Object.defineProperty(exports, "mapOrElseAsync", { enumerable: true, get: function () { return mapOrElseAsync_1.mapOrElseAsyncForNullable; } });
// XXX: `or()` operation is equivalent of `a || b` so we don't ship it by default set.
// export { orForNullable as or } from './or';
var orElse_1 = require("./orElse");
Object.defineProperty(exports, "orElse", { enumerable: true, get: function () { return orElse_1.orElseForNullable; } });
var orElseAsync_1 = require("./orElseAsync");
Object.defineProperty(exports, "orElseAsync", { enumerable: true, get: function () { return orElseAsync_1.orElseAsyncForNullable; } });
var tap_1 = require("./tap");
Object.defineProperty(exports, "tap", { enumerable: true, get: function () { return tap_1.tapNullable; } });
var unwrap_1 = require("./unwrap");
Object.defineProperty(exports, "unwrap", { enumerable: true, get: function () { return unwrap_1.unwrapNullable; } });
var unwrapOr_1 = require("./unwrapOr");
Object.defineProperty(exports, "unwrapOr", { enumerable: true, get: function () { return unwrapOr_1.unwrapOrFromNullable; } });
var unwrapOrElse_1 = require("./unwrapOrElse");
Object.defineProperty(exports, "unwrapOrElse", { enumerable: true, get: function () { return unwrapOrElse_1.unwrapOrElseFromNullable; } });
var unwrapOrElseAsync_1 = require("./unwrapOrElseAsync");
Object.defineProperty(exports, "unwrapOrElseAsync", { enumerable: true, get: function () { return unwrapOrElseAsync_1.unwrapOrElseAsyncFromNullable; } });
