"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mapAsyncForNullable = void 0;
var Nullable_1 = require("./Nullable");
var ErrorMessage_1 = require("./ErrorMessage");
var expect_1 = require("./expect");
var assert_1 = require("../internal/assert");
var ErrorMessage_2 = require("../internal/ErrorMessage");
function check(value) {
    var passed = expect_1.expectNotNull(value, ErrorMessage_1.ERR_MSG_TRANSFORMER_MUST_NOT_RETURN_NO_VAL_FOR_NULLABLE);
    return passed;
}
/**
 *  Return the result of _transformer_ with using _input_ as an argument for it if _input_ is not `null`,
 *  Otherwise, return `null`.
 *
 *  * `U` must not be `Nullable<*>`.
 *      * If you'd like return `Nullable<*>` as `U`, use `andThen()`.
 *      * If the result of _transformer_ is `null`, this throw an `Error`.
 */
function mapAsyncForNullable(input, transformer) {
    if (Nullable_1.isNull(input)) {
        return Promise.resolve(input);
    }
    var result = transformer(input);
    // If this is async function, this always return Promise, but not.
    // We should check to clarify the error case if user call this function from plain js
    // and they mistake to use this.
    assert_1.assertIsPromise(result, ErrorMessage_2.ERR_MSG_TRANSFORMER_MUST_RETURN_PROMISE);
    // XXX:
    // If `U` is `Nullable<SomeType>`, we think naturally the returned value of this function would be
    // the nested type `Nullable<Nullable<SomeType>>`. But this type means `(SomeType | null) | null`.
    // So a type checker would recognize this type as `SomeType | null`. So it's flattened.
    // Then the user should call `andThen` (_flatmap_) operation instead of this.
    var passed = result.then(check);
    return passed;
}
exports.mapAsyncForNullable = mapAsyncForNullable;
