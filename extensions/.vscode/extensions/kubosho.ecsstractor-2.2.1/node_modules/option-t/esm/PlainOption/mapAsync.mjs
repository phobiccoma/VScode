import { assertIsPromise } from "../internal/assert.mjs";
import { ERR_MSG_TRANSFORMER_MUST_RETURN_PROMISE } from "../internal/ErrorMessage.mjs";
import { createSome, isNone } from "./Option.mjs";
import { unwrapOption } from "./unwrap.mjs";
/**
 *  Maps a `Option<T>` to `Option<U>` by applying a _transformer_ function
 *  to an contained `Some(T)` value, leaving an `None` value untouched.
 *
 *  This function can be used to compose the results of two functions.
 */

export function mapAsyncForOption(input, transformer) {
  if (isNone(input)) {
    return Promise.resolve(input);
  }

  var inner = unwrapOption(input);
  var result = transformer(inner); // If this is async function, this always return Promise, but not.
  // We should check to clarify the error case if user call this function from plain js
  // and they mistake to use this.

  assertIsPromise(result, ERR_MSG_TRANSFORMER_MUST_RETURN_PROMISE);
  var wrapped = result.then(createSome);
  return wrapped;
}