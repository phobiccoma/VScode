import { assertIsPromise } from "../internal/assert.mjs";
import { ERR_MSG_RECOVERER_MUST_RETURN_PROMISE } from "../internal/ErrorMessage.mjs";
import { expectNotNull } from "./expect.mjs";
import { ERR_MSG_RECOVERER_MUST_NOT_RETURN_NO_VAL_FOR_NULLABLE } from "./ErrorMessage.mjs";

function check(value) {
  var passed = expectNotNull(value, ERR_MSG_RECOVERER_MUST_NOT_RETURN_NO_VAL_FOR_NULLABLE);
  return passed;
}
/**
 *  Return _input_ as `T` if the passed _input_ is not `null`.
 *  Otherwise, return the result of _recoverer_.
 *
 *  * The result of _recoverer_ must not be `Nullable<*>`.
 *      * If you try to recover the value, use `orElse()`
 *  * If the result of _recoverer_ is `null`, throw `TypeError`.
 */


export function unwrapOrElseAsyncFromNullable(input, recoverer) {
  if (input !== null) {
    return Promise.resolve(input);
  }

  var fallback = recoverer(); // If this is async function, this always return Promise, but not.
  // We should check to clarify the error case if user call this function from plain js
  // and they mistake to use this.

  assertIsPromise(fallback, ERR_MSG_RECOVERER_MUST_RETURN_PROMISE);
  var passed = fallback.then(check);
  return passed;
}