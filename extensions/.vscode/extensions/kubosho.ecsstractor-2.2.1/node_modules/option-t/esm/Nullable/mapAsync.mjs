import { isNull } from "./Nullable.mjs";
import { ERR_MSG_TRANSFORMER_MUST_NOT_RETURN_NO_VAL_FOR_NULLABLE } from "./ErrorMessage.mjs";
import { expectNotNull } from "./expect.mjs";
import { assertIsPromise } from "../internal/assert.mjs";
import { ERR_MSG_TRANSFORMER_MUST_RETURN_PROMISE } from "../internal/ErrorMessage.mjs";

function check(value) {
  var passed = expectNotNull(value, ERR_MSG_TRANSFORMER_MUST_NOT_RETURN_NO_VAL_FOR_NULLABLE);
  return passed;
}
/**
 *  Return the result of _transformer_ with using _input_ as an argument for it if _input_ is not `null`,
 *  Otherwise, return `null`.
 *
 *  * `U` must not be `Nullable<*>`.
 *      * If you'd like return `Nullable<*>` as `U`, use `andThen()`.
 *      * If the result of _transformer_ is `null`, this throw an `Error`.
 */


export function mapAsyncForNullable(input, transformer) {
  if (isNull(input)) {
    return Promise.resolve(input);
  }

  var result = transformer(input); // If this is async function, this always return Promise, but not.
  // We should check to clarify the error case if user call this function from plain js
  // and they mistake to use this.

  assertIsPromise(result, ERR_MSG_TRANSFORMER_MUST_RETURN_PROMISE); // XXX:
  // If `U` is `Nullable<SomeType>`, we think naturally the returned value of this function would be
  // the nested type `Nullable<Nullable<SomeType>>`. But this type means `(SomeType | null) | null`.
  // So a type checker would recognize this type as `SomeType | null`. So it's flattened.
  // Then the user should call `andThen` (_flatmap_) operation instead of this.

  var passed = result.then(check);
  return passed;
}