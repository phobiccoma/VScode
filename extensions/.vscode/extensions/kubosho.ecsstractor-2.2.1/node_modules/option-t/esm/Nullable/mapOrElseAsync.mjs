import { isNotNull } from "./Nullable.mjs";
import { assertIsPromise } from "../internal/assert.mjs";
import { ERR_MSG_TRANSFORMER_MUST_RETURN_PROMISE, ERR_MSG_RECOVERER_MUST_RETURN_PROMISE } from "../internal/ErrorMessage.mjs";
import { ERR_MSG_TRANSFORMER_MUST_NOT_RETURN_NO_VAL_FOR_NULLABLE, ERR_MSG_RECOVERER_MUST_NOT_RETURN_NO_VAL_FOR_NULLABLE } from "./ErrorMessage.mjs";
import { expectNotNull } from "./expect.mjs";
/**
 *  Return the result of _transformer_ with using _input_ as an argument for it if _input_ is not `null`.
 *  Otherwise, return the result of _recoverer_.
 *
 *  Basically, this operation is a combination `mapAsync()` and `unwrapOrElseAsync()`.
 *
 *  * `U` must not be `Nullable<*>`.
 *      * If the result of _transformer_ is `null`, this throw an `Error`.
 *      * If the result of _recoverer_ is null`, this throw an `Error`.
 *  * If you'd like to accept `Nullable<*>` as `U`, use a combination `andThenAsync()` and `orElseAsync()`.
 */

export function mapOrElseAsyncForNullable(input, recoverer, transformer) {
  var result = null;
  var messageForPromiseCheck = '';
  var messageForExpect = '';

  if (isNotNull(input)) {
    result = transformer(input);
    messageForPromiseCheck = ERR_MSG_TRANSFORMER_MUST_RETURN_PROMISE;
    messageForExpect = ERR_MSG_TRANSFORMER_MUST_NOT_RETURN_NO_VAL_FOR_NULLABLE;
  } else {
    result = recoverer();
    messageForPromiseCheck = ERR_MSG_RECOVERER_MUST_RETURN_PROMISE;
    messageForExpect = ERR_MSG_RECOVERER_MUST_NOT_RETURN_NO_VAL_FOR_NULLABLE;
  } // If this is async function, this always return Promise, but not.
  // We should check to clarify the error case if user call this function from plain js
  // and they mistake to use this.


  assertIsPromise(result, messageForPromiseCheck);
  var passed = result.then(function (result) {
    var unwrappedResult = expectNotNull(result, messageForExpect);
    return unwrappedResult;
  });
  return passed;
}