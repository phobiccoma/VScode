export { isNotNull, isNull } from "./Nullable.mjs"; // XXX: `and()` operation is equivalent of `a && b` so we don't ship it by default set.
//export { andForNullable as and } from './and';

export { andThenForNullable as andThen } from "./andThen.mjs";
export { andThenAsyncForNullable as andThenAsync } from "./andThenAsync.mjs";
export { expectNotNull as expect } from "./expect.mjs";
export { mapForNullable as map } from "./map.mjs";
export { mapAsyncForNullable as mapAsync } from "./mapAsync.mjs";
export { mapOrForNullable as mapOr } from "./mapOr.mjs";
export { mapOrAsyncForNullable as mapOrAsync } from "./mapOrAsync.mjs";
export { mapOrElseForNullable as mapOrElse } from "./mapOrElse.mjs";
export { mapOrElseAsyncForNullable as mapOrElseAsync } from "./mapOrElseAsync.mjs"; // XXX: `or()` operation is equivalent of `a || b` so we don't ship it by default set.
// export { orForNullable as or } from './or';

export { orElseForNullable as orElse } from "./orElse.mjs";
export { orElseAsyncForNullable as orElseAsync } from "./orElseAsync.mjs";
export { tapNullable as tap } from "./tap.mjs";
export { unwrapNullable as unwrap } from "./unwrap.mjs";
export { unwrapOrFromNullable as unwrapOr } from "./unwrapOr.mjs";
export { unwrapOrElseFromNullable as unwrapOrElse } from "./unwrapOrElse.mjs";
export { unwrapOrElseAsyncFromNullable as unwrapOrElseAsync } from "./unwrapOrElseAsync.mjs";