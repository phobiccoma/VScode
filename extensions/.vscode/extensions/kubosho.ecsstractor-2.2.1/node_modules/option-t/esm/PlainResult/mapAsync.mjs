import { assertIsPromise } from "../internal/assert.mjs";
import { ERR_MSG_TRANSFORMER_MUST_RETURN_PROMISE } from "../internal/ErrorMessage.mjs";
import { createOk, isErr } from "./Result.mjs";
import { unwrapFromResult } from "./unwrap.mjs";
/**
 *  Maps a `Result<T, E>` to `Result<U, E>` by applying a _transformer_ function
 *  to an contained `Ok(T)` value, leaving an `Err(E)` value untouched.
 *
 *  This function can be used to compose the results of two functions.
 */

export function mapAsyncForResult(input, transformer) {
  if (isErr(input)) {
    var s = input;
    return Promise.resolve(s);
  }

  var inner = unwrapFromResult(input);
  var result = transformer(inner); // If this is async function, this always return Promise, but not.
  // We should check to clarify the error case if user call this function from plain js
  // and they mistake to use this.

  assertIsPromise(result, ERR_MSG_TRANSFORMER_MUST_RETURN_PROMISE);
  var passed = result.then(createOk);
  return passed;
}