/**
 *  This module provies that the Result/Either type interface whose APIs are inspired
 *  by Rust's [`std::result::Result<T, E>`](https://doc.rust-lang.org/std/result/index.html).
 *
 *  We don't use a class to provides this module by these reason:
 *
 *  - Make treeshaking friendly.
 *      - Almost minifier cannot remove functions by default on `.prototype` even if they are unused.
 *  - Relax the incompatible problem by mixing multiple versions of this package
 *    in module dependency tree.
 *      - e.g. `instanceof` will be a problem. See ([#337](https://github.com/karen-irc/option-t/pull/337)).
 *
 *  And some operators might not return a new object and reuse the input
 *  to reduce an object allocation. Thus comparing _this `Option<T>`` is meaningless like a following code.
 *  This is by design because we think this pattern is meaningless.
 *
 *  ```typescript
 *      const a: Result<number, string> = createOk(1);
 *      const b: Result<number, string> = someOperator(a);
 *
 *      // Results of these comparison are undefined.
 *      a === b;
 *      Object.is(a, b);
 *  ```
 */
export { createOk, createErr, isOk, isErr } from "./Result.mjs";
export { andForResult as and } from "./and.mjs";
export { andThenForResult as andThen } from "./andThen.mjs";
export { andThenAsyncForResult as andThenAsync } from "./andThenAsync.mjs";
export { equalForResult as equal } from "./equal.mjs";
export { expectIsOk as expect, expectIsErr as expectErr } from "./expect.mjs";
export { flattenForResult as flatten } from "./flatten.mjs";
export { mapForResult as map } from "./map.mjs";
export { mapAsyncForResult as mapAsync } from "./mapAsync.mjs";
export { mapOrForResult as mapOr } from "./mapOr.mjs";
export { mapOrAsyncForResult as mapOrAsync } from "./mapOrAsync.mjs";
export { mapOrElseForResult as mapOrElse } from "./mapOrElse.mjs";
export { mapOrElseAsyncForResult as mapOrElseAsync } from "./mapOrElseAsync.mjs";
export { mapErrForResult as mapErr } from "./mapErr.mjs";
export { mapErrAsyncForResult as mapErrAsync } from "./mapErrAsync.mjs";
export { orForResult as or } from "./or.mjs";
export { orElseForResult as orElse } from "./orElse.mjs";
export { orElseAsyncForResult as orElseAsync } from "./orElseAsync.mjs";
export { tapOk, tapErr, tapBoth } from "./tap.mjs";
export { transposeForResult as transpose } from "./transpose.mjs";
export { toOptionFromOk, toOptionFromErr } from "./toOption.mjs";
export { unwrapFromResult as unwrap, unwrapErrFromResult as unwrapErr } from "./unwrap.mjs";
export { unwrapOrFromResult as unwrapOr } from "./unwrapOr.mjs";
export { unwrapOrElseFromResult as unwrapOrElse } from "./unwrapOrElse.mjs";
export { unwrapOrElseAsyncFromResult as unwrapOrElseAsync } from "./unwrapOrElseAsync.mjs";