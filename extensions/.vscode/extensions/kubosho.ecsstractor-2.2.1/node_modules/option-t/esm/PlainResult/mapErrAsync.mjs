import { assertIsPromise } from "../internal/assert.mjs";
import { ERR_MSG_TRANSFORMER_MUST_RETURN_PROMISE } from "../internal/ErrorMessage.mjs";
import { createErr, isOk } from "./Result.mjs";
/**
 *  Maps a `Result<T, E>` to `Result<T, F>` by applying a _transformer_ function `mapFn<E, F>`
 *  to an contained `Err(E)` value, leaving an `Ok(T)` value untouched.
 *
 *  This function can be used to pass through a successful result while handling an error.
 */

export function mapErrAsyncForResult(input, transformer) {
  if (isOk(input)) {
    var s = input;
    return Promise.resolve(s);
  }

  var result = transformer(input.err); // If this is async function, this always return Promise, but not.
  // We should check to clarify the error case if user call this function from plain js
  // and they mistake to use this.

  assertIsPromise(result, ERR_MSG_TRANSFORMER_MUST_RETURN_PROMISE);
  var passed = result.then(createErr);
  return passed;
}