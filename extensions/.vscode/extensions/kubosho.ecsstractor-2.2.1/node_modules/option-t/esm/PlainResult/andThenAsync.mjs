import { assertIsPromise } from "../internal/assert.mjs";
import { ERR_MSG_TRANSFORMER_MUST_RETURN_PROMISE } from "../internal/ErrorMessage.mjs";
import { isErr } from "./Result.mjs";
import { unwrapFromResult } from "./unwrap.mjs";
/**
 *  Returns `Promise<Err(E)>` if the _input_ is `Err(E)`,
 *  otherwise calls _transformer_ with the value and returns the result.
 *
 *  XXX:
 *  Some languages call this operation flatmap.
 *  But we don't provide `flatMap()` as alias of this function
 *  to sort with other APIs.
 */

export function andThenAsyncForResult(input, transformer) {
  if (isErr(input)) {
    return Promise.resolve(input);
  }

  var source = unwrapFromResult(input);
  var result = transformer(source); // If this is async function, this always return Promise, but not.
  // We should check to clarify the error case if user call this function from plain js
  // and they mistake to use this.

  assertIsPromise(result, ERR_MSG_TRANSFORMER_MUST_RETURN_PROMISE);
  return result;
}