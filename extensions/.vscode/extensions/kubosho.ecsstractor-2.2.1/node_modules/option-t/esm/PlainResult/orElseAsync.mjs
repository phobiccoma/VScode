import { assertIsPromise } from "../internal/assert.mjs";
import { ERR_MSG_RECOVERER_MUST_RETURN_PROMISE } from "../internal/ErrorMessage.mjs";
import { isOk } from "./Result.mjs";
import { unwrapErrFromResult } from "./unwrap.mjs";
/**
 *  Calls _recoverer_ and return its returned value if the result is `Err(E)`,
 *  otherwise returns the `Ok(T)` value of self.
 */

export function orElseAsyncForResult(input, recoverer) {
  if (isOk(input)) {
    return Promise.resolve(input);
  }

  var inner = unwrapErrFromResult(input);
  var defaultValue = recoverer(inner); // If this is async function, this always return Promise, but not.
  // We should check to clarify the error case if user call this function from plain js
  // and they mistake to use this.

  assertIsPromise(defaultValue, ERR_MSG_RECOVERER_MUST_RETURN_PROMISE);
  return defaultValue;
}